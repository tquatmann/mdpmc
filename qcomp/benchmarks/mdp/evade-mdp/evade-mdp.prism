mdp

const int RADIUS = 1;

const int N;
const int xMAX = N-1;
const int yMAX = N-1;
const int aXMAX = xMAX;
const int aYMAX = yMAX;
const int aXMIN = 0;
const int aYMIN = 1;
const int dxMAX = xMAX;
const int dyMAX = yMAX;
const int dxMIN = 0;
const int dyMIN = 0;
const double slippery;

formula done = start & dx = dxMAX & dy = dyMAX;
formula crash =  (dx = ax & dy = ay) | (dx = ax2 & dy = ay2);


module master
    start : bool init false;
    turn : bool init false;

    [placement] !start -> (start'=true);
    [north] start & turn -> (turn'=!turn);
    [south] start & !done & turn -> (turn'=!turn);
    [east]  start & !done & turn -> (turn'=!turn);
    [west]  start & !done & turn -> (turn'=!turn);
    [adv]  start & !done & !turn -> (turn'=!turn);
    [scan] start & !done & turn -> (turn'=!turn);
endmodule


module drone
    dx : [dxMIN..dxMAX] init 0;
    dy : [dyMIN..dyMAX] init 0;

    [west] true -> (1-slippery): (dx'=max(dx-1,dxMIN)) + slippery: (dx'=max(dx,dxMIN));
    [east] true -> (1-slippery): (dx'=min(dx+1,dxMAX)) + slippery: (dx'=min(dx,dxMAX));
    [south]  true -> (1-slippery): (dy'=min(dy+1,dyMAX)) + slippery: (dy'=min(dy,dyMAX));
    [north]  true -> (1-slippery): (dy'=max(dy-1,dyMIN)) + slippery: (dy'=max(dy,dyMIN));
    [scan] true -> 1:(dx'=dx);
endmodule



module agent
    ax : [aXMIN..aXMAX] init aXMAX-1;
    ay : [aYMIN..aYMAX] init aYMAX;

    [adv] true -> 1/4 : (ax'=max(ax-1,aXMIN)) +  1/4: (ax'=min(ax+1,aXMAX))
                + 1/4 : (ay'=max(ay-1,aYMIN)) + 1/4 : (ay'=min(ay+1,aYMAX));
endmodule

module agent2 = agent[ax=ax2,ay=ay2] endmodule



label "goal" = done;
label "traps" = crash;
label "notbad" =  !crash;
